(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global['royce-ui'] = factory());
}(this, function () { 'use strict';

  var ResizeBox = {
    render: function render() {
      var _vm = this;

      var _h = _vm.$createElement;

      var _c = _vm._self._c || _h;

      return _c('div', {
        staticClass: "resize-box"
      }, [_vm.move.t ? _c('div', {
        staticClass: "line line-t",
        attrs: {
          "data-type": "t"
        },
        on: {
          "mousedown": function mousedown($event) {
            $event.preventDefault();
            return _vm.onMousedown($event);
          }
        }
      }) : _vm._e(), _vm._v(" "), _vm.move.l ? _c('div', {
        staticClass: "line line-l",
        attrs: {
          "data-type": "l"
        },
        on: {
          "mousedown": function mousedown($event) {
            $event.preventDefault();
            return _vm.onMousedown($event);
          }
        }
      }) : _vm._e(), _vm._v(" "), _vm.move.r ? _c('div', {
        staticClass: "line line-r",
        attrs: {
          "data-type": "r"
        },
        on: {
          "mousedown": function mousedown($event) {
            $event.preventDefault();
            return _vm.onMousedown($event);
          }
        }
      }) : _vm._e(), _vm._v(" "), _vm.move.b ? _c('div', {
        staticClass: "line line-b",
        attrs: {
          "data-type": "b"
        },
        on: {
          "mousedown": function mousedown($event) {
            $event.preventDefault();
            return _vm.onMousedown($event);
          }
        }
      }) : _vm._e(), _vm._v(" "), _vm.move.tl ? _c('div', {
        staticClass: "angle angle-tl",
        attrs: {
          "data-type": "tl"
        },
        on: {
          "mousedown": function mousedown($event) {
            $event.preventDefault();
            return _vm.onMousedown($event);
          }
        }
      }) : _vm._e(), _vm._v(" "), _vm.move.tr ? _c('div', {
        staticClass: "angle angle-tr",
        attrs: {
          "data-type": "tr"
        },
        on: {
          "mousedown": function mousedown($event) {
            $event.preventDefault();
            return _vm.onMousedown($event);
          }
        }
      }) : _vm._e(), _vm._v(" "), _vm.move.bl ? _c('div', {
        staticClass: "angle angle-bl",
        attrs: {
          "data-type": "bl"
        },
        on: {
          "mousedown": function mousedown($event) {
            $event.preventDefault();
            return _vm.onMousedown($event);
          }
        }
      }) : _vm._e(), _vm._v(" "), _vm.move.br ? _c('div', {
        staticClass: "angle angle-br",
        attrs: {
          "data-type": "br"
        },
        on: {
          "mousedown": function mousedown($event) {
            $event.preventDefault();
            return _vm.onMousedown($event);
          }
        }
      }) : _vm._e(), _vm._v(" "), _vm._t("default")], 2);
    },
    staticRenderFns: [],
    name: "resize-box",
    props: {
      max: {
        type: Object,
        default: function _default() {
          return {
            width: 0,
            height: 0
          };
        }
      },
      min: {
        type: Object,
        default: function _default() {
          return {
            width: 0,
            height: 0
          };
        }
      },
      move: {
        type: Object,
        default: function _default() {
          return {
            t: true,
            l: true,
            r: true,
            b: true,
            tl: true,
            tr: true,
            bl: true,
            br: true
          };
        }
      },
      speed: {
        type: Number,
        default: 1
      }
    },
    created: function created() {
      document.body.addEventListener("mouseup", this.onMouseup);
    },
    destroyed: function destroyed() {
      document.body.removeEventListener("mouseup", this.onMouseup);
    },
    methods: {
      getStyle: function getStyle(element) {
        return element.currentStyle ? element.currentStyle : getComputedStyle(element, false);
      },
      onMouseup: function onMouseup(event) {
        document.body.style.cursor = "default";
        document.body.removeEventListener("mousemove", this.onMousemove);
      },
      onMousedown: function onMousedown(event) {
        this.dataType = event.target.getAttribute("data-type");
        this.event = event;

        var _this$getStyle = this.getStyle(event.target),
            cursor = _this$getStyle.cursor;

        document.body.style.cursor = cursor;
        document.body.addEventListener("mousemove", this.onMousemove);
      },
      onMousemove: function onMousemove(event) {
        var _this$getStyle2 = this.getStyle(this.$el),
            width = _this$getStyle2.width,
            height = _this$getStyle2.height;

        this[this.dataType]({
          event: event,
          width: parseInt(width),
          height: parseInt(height)
        });
        this.event = event;
      },
      tl: function tl(_ref) {
        var event = _ref.event,
            width = _ref.width,
            height = _ref.height;
        this.t({
          event: event,
          height: height
        });
        this.l({
          event: event,
          width: width
        });
      },
      tr: function tr(_ref2) {
        var event = _ref2.event,
            width = _ref2.width,
            height = _ref2.height;
        this.t({
          event: event,
          height: height
        });
        this.r({
          event: event,
          width: width
        });
      },
      bl: function bl(_ref3) {
        var event = _ref3.event,
            width = _ref3.width,
            height = _ref3.height;
        this.b({
          event: event,
          height: height
        });
        this.l({
          event: event,
          width: width
        });
      },
      br: function br(_ref4) {
        var event = _ref4.event,
            width = _ref4.width,
            height = _ref4.height;
        this.b({
          event: event,
          height: height
        });
        this.r({
          event: event,
          width: width
        });
      },
      t: function t(_ref5) {
        var event = _ref5.event,
            height = _ref5.height;

        if (event.y > this.event.y) {
          this.$el.style.height = this.min.height ? "".concat(Math.max(this.min.height, height - (event.y - this.event.y) * this.speed), "px") : "".concat(height - (event.y - this.event.y) * this.speed, "px");
        } else {
          this.$el.style.height = this.max.height ? "".concat(Math.min(this.max.height, height + (this.event.y - event.y) * this.speed), "px") : "".concat(height + (this.event.y - event.y) * this.speed, "px");
        }
      },
      l: function l(_ref6) {
        var event = _ref6.event,
            width = _ref6.width;

        if (event.x > this.event.x) {
          this.$el.style.width = this.min.width ? "".concat(Math.max(this.min.width, width - (event.x - this.event.x) * this.speed), "px") : "".concat(width - (event.x - this.event.x) * this.speed, "px");
        } else {
          this.$el.style.width = this.max.width ? "".concat(Math.min(this.max.width, width + (this.event.x - event.x) * this.speed), "px") : "".concat(width + (this.event.x - event.x) * this.speed, "px");
        }
      },
      r: function r(_ref7) {
        var event = _ref7.event,
            width = _ref7.width;

        if (event.x > this.event.x) {
          this.$el.style.width = this.max.width ? "".concat(Math.min(this.max.width, width + (event.x - this.event.x) * this.speed), "px") : "".concat(width + (event.x - this.event.x) * this.speed, "px");
        } else {
          this.$el.style.width = this.min.width ? "".concat(Math.max(this.min.width, width - (this.event.x - event.x) * this.speed), "px") : "".concat(width - (this.event.x - event.x) * this.speed, "px");
        }
      },
      b: function b(_ref8) {
        var event = _ref8.event,
            height = _ref8.height;

        if (event.y > this.event.y) {
          this.$el.style.height = this.max.height ? "".concat(Math.min(this.max.height, height + (event.y - this.event.y) * this.speed), "px") : "".concat(height + (event.y - this.event.y) * this.speed, "px");
        } else {
          this.$el.style.height = this.min.height ? "".concat(Math.max(this.min.height, height - (this.event.y - event.y) * this.speed), "px") : "".concat(height - (this.event.y - event.y) * this.speed, "px");
        }
      }
    }
  };

  var components = {
    ResizeBox: ResizeBox
  };

  var install = function install(Vue)
  /* options = {} */
  {
    Object.keys(components).forEach(function (key) {
      Vue.component(key, components[key]);
    });
  };

  return install;

}));
//# sourceMappingURL=royce-ui.min.js.map
